from __future__ import annotations

import base64
import os
from typing import Dict, List, Optional

import requests


class SpotifyClient:
    def __init__(self, client_id: str, client_secret: str, redirect_uri: str, scopes: str) -> None:
        self.client_id = client_id
        self.client_secret = client_secret
        self.redirect_uri = redirect_uri
        self.scopes = scopes

    def build_authorize_url(self, state: str) -> str:
        from urllib.parse import urlencode

        params = {
            "client_id": self.client_id,
            "response_type": "code",
            "redirect_uri": self.redirect_uri,
            "scope": self.scopes,
            "state": state,
            "show_dialog": "false",
        }
        return f"https://accounts.spotify.com/authorize?{urlencode(params)}"

    def exchange_code_for_token(self, code: str) -> Dict[str, str]:
        token_url = "https://accounts.spotify.com/api/token"
        data = {
            "grant_type": "authorization_code",
            "code": code,
            "redirect_uri": self.redirect_uri,
            "client_id": self.client_id,
            "client_secret": self.client_secret,
        }
        resp = requests.post(token_url, data=data, timeout=10)
        return resp.json() if resp.ok else {"error": "token_request_failed"}

    def get_me(self, access_token: str) -> Optional[Dict]:
        resp = requests.get(
            "https://api.spotify.com/v1/me",
            headers={"Authorization": f"Bearer {access_token}"},
            timeout=10,
        )
        return resp.json() if resp.ok else None

    def get_liked_tracks(self, access_token: str, limit: int = 250) -> List[Dict]:
        url = "https://api.spotify.com/v1/me/tracks"
        headers = {"Authorization": f"Bearer {access_token}"}
        items: List[Dict] = []
        params = {"limit": 50}
        while url and len(items) < limit:
            resp = requests.get(url, headers=headers, params=params, timeout=10)
            if not resp.ok:
                break
            data = resp.json()
            for it in data.get("items", []):
                track = it.get("track")
                if track:
                    items.append(track)
                    if len(items) >= limit:
                        break
            url = data.get("next")
            params = None
        return items

    def get_playlist_tracks(self, access_token: str, playlist_id: str, limit: int = 250) -> List[Dict]:
        url = f"https://api.spotify.com/v1/playlists/{playlist_id}/tracks"
        headers = {"Authorization": f"Bearer {access_token}"}
        items: List[Dict] = []
        params = {"limit": 100}
        while url and len(items) < limit:
            resp = requests.get(url, headers=headers, params=params, timeout=10)
            if not resp.ok:
                break
            data = resp.json()
            for it in data.get("items", []):
                track = it.get("track")
                if track:
                    items.append(track)
                    if len(items) >= limit:
                        break
            url = data.get("next")
            params = None
        return items

    def create_playlist(self, access_token: str, user_id: str, name: str) -> Dict:
        url = f"https://api.spotify.com/v1/users/{user_id}/playlists"
        payload = {"name": name, "public": False, "description": "Generated by Color Playlist"}
        resp = requests.post(
            url,
            headers={
                "Authorization": f"Bearer {access_token}",
                "Content-Type": "application/json",
            },
            json=payload,
            timeout=10,
        )
        return resp.json() if resp.ok else {"error": "create_playlist_failed"}

    def add_tracks(self, access_token: str, playlist_id: str, uris: list[str]) -> bool:
        url = f"https://api.spotify.com/v1/playlists/{playlist_id}/tracks"
        headers = {"Authorization": f"Bearer {access_token}", "Content-Type": "application/json"}
        # Batch in chunks of 100 per Spotify API limits
        for i in range(0, len(uris), 100):
            chunk = uris[i : i + 100]
            resp = requests.post(url, headers=headers, json={"uris": chunk}, timeout=10)
            if not resp.ok:
                return False
        return True

    def upload_playlist_cover(self, access_token: str, playlist_id: str, base64_jpeg: str) -> bool:
        url = f"https://api.spotify.com/v1/playlists/{playlist_id}/images"
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "image/jpeg",
        }
        # Spotify expects the request body to be the base64-encoded JPEG bytes
        # without any JSON wrapper. Do not decode before sending.
        if isinstance(base64_jpeg, str):
            payload = base64_jpeg.encode("utf-8")
        else:
            payload = base64_jpeg
        resp = requests.put(url, headers=headers, data=payload, timeout=10)
        return resp.ok


